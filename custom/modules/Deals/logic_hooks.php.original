<?php
/**
 * Enhanced Deals Module Logic Hooks with Comprehensive CRUD Support
 * 
 * This file defines all logic hooks for the Deals module, orchestrating various
 * automated processes throughout the deal lifecycle. Logic hooks are triggered
 * at specific points in the deal's lifecycle (create, update, delete, retrieve)
 * and enable automated workflows, validation, and data synchronization.
 * 
 * Hook Execution Order:
 * - Before Save: Validation hooks run first (lower order numbers)
 * - After Save: Workflow and update hooks run after successful save
 * - Before Delete: Pre-deletion cleanup and archival
 * - After Delete: Post-deletion notifications and cleanup
 * - After Retrieve: Data enrichment and calculation hooks
 * - Process Record: List view data enhancement
 * 
 * @package MakeDealCRM
 * @module Deals
 * @author MakeDealCRM Development Team
 * @version 1.0.0
 */

if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point');

$hook_version = 1;
$hook_array = array();

/**
 * Before Save Hooks
 * 
 * These hooks execute before a deal record is saved to the database.
 * They are primarily used for validation and data preparation.
 * Lower order numbers execute first.
 */
$hook_array['before_save'] = array();

/**
 * Deal Validation Hook
 * 
 * Validates all deal data before saving to ensure data integrity and business rules compliance.
 * This hook performs comprehensive validation including:
 * - Required field validation
 * - Format validation (emails, phone numbers, etc.)
 * - Business rule validation (stage transitions, financial calculations)
 * - Security checks for data access
 * 
 * @order 95 - Runs early to catch validation errors before other hooks
 * @throws Exception When critical validation errors occur
 */
$hook_array['before_save'][] = array(
    95,
    'Validate deal data before save',
    'custom/modules/Deals/logic_hooks/ValidationHook.php',
    'ValidationHook',
    'validateDealBeforeSave'
);

/**
 * WIP (Work In Progress) Limit Validation Hook
 * 
 * Enforces Work In Progress limits for each pipeline stage to maintain team focus
 * and prevent overload. This hook:
 * - Checks current deal count in target stage against configured limits
 * - Prevents stage transitions that would exceed WIP limits
 * - Allows admin users to override limits if needed
 * - Provides clear error messages when limits are reached
 * 
 * WIP limits help teams maintain quality by limiting concurrent deals in active stages.
 * 
 * @order 98 - Runs after general validation but before save
 * @throws SugarApiExceptionNotAuthorized When WIP limit would be exceeded
 */
$hook_array['before_save'][] = array(
    98,
    'Validate WIP limits for pipeline stages',
    'custom/modules/Deals/logic_hooks/WIPLimitHook.php',
    'WIPLimitHook',
    'validateWIPLimit'
);

/**
 * After Save Hooks
 * 
 * These hooks execute after a deal record has been successfully saved to the database.
 * They handle workflows, notifications, and related record updates that depend on
 * the deal being persisted.
 */
$hook_array['after_save'] = array();

/**
 * Workflow Manager - Deal Creation/Updates Hook
 * 
 * Manages automated workflows triggered by deal creation or updates. This comprehensive
 * workflow handler:
 * - Auto-assigns teams based on deal source or criteria
 * - Sets default probability values based on pipeline stage
 * - Creates initial checklist items from templates
 * - Generates stage-specific tasks automatically
 * - Sends notifications to relevant stakeholders
 * - Logs all workflow actions for audit trail
 * 
 * This hook distinguishes between new deals and updates to apply appropriate workflows.
 * 
 * @order 96 - Runs early in after_save to set up other processes
 */
$hook_array['after_save'][] = array(
    96,
    'Handle deal workflow processes',
    'custom/modules/Deals/workflow/DealWorkflowManager.php',
    'DealWorkflowManager',
    'onDealCreate'
);

/**
 * Workflow Manager - Pipeline Stage Change Hook
 * 
 * Handles workflows specifically triggered by pipeline stage transitions. This hook:
 * - Updates probability based on new stage (e.g., 80% for LOI stage)
 * - Creates stage-specific tasks and action items
 * - Updates related checklist items for the new stage
 * - Sends stage change notifications to deal team
 * - Handles special transitions (won/lost deals)
 * - Tracks stage regression for analysis
 * - Updates reporting metrics and dashboards
 * 
 * Stage transitions are critical moments in the deal lifecycle requiring
 * coordinated actions across multiple systems.
 * 
 * @order 97 - Runs after general workflow but before other updates
 */
$hook_array['after_save'][] = array(
    97,
    'Handle pipeline stage changes',
    'custom/modules/Deals/workflow/DealWorkflowManager.php',
    'DealWorkflowManager',
    'onStageChange'
);

/**
 * Pipeline Stage History Tracking Hook
 * 
 * Records all pipeline stage transitions for historical analysis and reporting.
 * This hook:
 * - Creates immutable history records of all stage changes
 * - Calculates and stores time spent in each stage
 * - Records who made the change and when
 * - Captures transition notes if provided
 * - Updates stage duration metrics for reporting
 * - Sends notifications for configured stage changes
 * 
 * Historical data enables pipeline analysis, bottleneck identification,
 * and process improvement initiatives.
 * 
 * @order 99 - Runs after workflows to capture final state
 */
$hook_array['after_save'][] = array(
    99,
    'Update pipeline stage history',
    'custom/modules/Deals/logic_hooks/PipelineStageHook.php',
    'PipelineStageHook',
    'updateStageHistory'
);

/**
 * Checklist Progress Update Hook
 * 
 * Maintains real-time checklist completion metrics for deals. This hook:
 * - Calculates overall checklist completion percentage
 * - Counts active checklists associated with the deal
 * - Identifies and counts overdue checklist items
 * - Updates deal fields with current checklist metrics
 * - Can trigger stage advancement based on completion thresholds
 * 
 * Checklist completion is a key indicator of deal readiness and helps
 * ensure all due diligence steps are completed.
 * 
 * @order 100 - Runs last to capture all changes
 */
$hook_array['after_save'][] = array(
    100,
    'Update checklist completion percentage',
    'custom/modules/Deals/ChecklistLogicHook.php',
    'ChecklistLogicHook',
    'updateChecklistCompletion'
);

/**
 * Before Delete Hooks
 * 
 * These hooks execute before a deal is deleted from the system.
 * They handle pre-deletion workflows, archival, and cleanup operations.
 */
$hook_array['before_delete'] = array();

/**
 * Workflow Manager - Pre-deletion Hook
 * 
 * Manages workflows that must complete before deal deletion. This hook:
 * - Archives related records instead of cascade deleting
 * - Captures final deal state for historical records
 * - Notifies stakeholders of pending deletion
 * - Updates reporting metrics to reflect deletion
 * - Cancels any pending automated tasks
 * - Creates audit log entry for deletion
 * 
 * Proper pre-deletion handling ensures data integrity and maintains
 * historical records for compliance and analysis.
 * 
 * @order 85 - Runs first to prepare for deletion
 */
$hook_array['before_delete'][] = array(
    85,
    'Handle deal pre-deletion workflow',
    'custom/modules/Deals/workflow/DealWorkflowManager.php',
    'DealWorkflowManager',
    'onDealDelete'
);

/**
 * Related Records Cleanup Hook
 * 
 * Handles cleanup of related records before deal deletion. This hook:
 * - Soft deletes pipeline stage history records
 * - Archives checklist data for compliance
 * - Removes orphaned relationship records
 * - Cleans up temporary workflow data
 * - Preserves audit trail information
 * 
 * Uses soft delete (deleted=1) rather than hard delete to maintain
 * data integrity and allow for recovery if needed.
 * 
 * @order 90 - Runs after workflow preparation
 */
$hook_array['before_delete'][] = array(
    90,
    'Clean up pipeline history records',
    'custom/modules/Deals/logic_hooks/CleanupHook.php',
    'CleanupHook',
    'cleanupPipelineHistory'
);

/**
 * After Retrieve Hooks
 * 
 * These hooks execute after a deal record is retrieved from the database.
 * They enrich the deal data with calculated fields, metrics, and dynamic values
 * that are not stored in the database.
 */
$hook_array['after_retrieve'] = array();

/**
 * Enhanced Deal Metrics Calculation Hook
 * 
 * Calculates and populates dynamic metrics when a deal is retrieved. This hook:
 * - Calculates total capital stack from equity, debt, and seller notes
 * - Computes financial ratios (debt coverage, ROI, multiples)
 * - Determines deal scoring based on multiple factors
 * - Calculates weighted pipeline value
 * - Generates performance indicators
 * - Formats currency values for display
 * 
 * These calculations are performed on-retrieve rather than stored to ensure
 * they always reflect the latest data and calculation rules.
 * 
 * @order 75 - Runs first to make metrics available to other hooks
 */
$hook_array['after_retrieve'][] = array(
    75,
    'Calculate enhanced deal metrics',
    'custom/modules/Deals/logic_hooks/MetricsHook.php',
    'MetricsHook',
    'calculateDealMetrics'
);

/**
 * Security Access Validation Hook
 * 
 * Enforces row-level security when deals are retrieved. This hook:
 * - Validates user has permission to view the deal
 * - Checks team-based access restrictions
 * - Applies data visibility rules based on role
 * - Masks sensitive financial data if needed
 * - Logs access attempts for security audit
 * - Can redirect or throw exceptions for unauthorized access
 * 
 * This provides an additional security layer beyond SuiteCRM's standard
 * ACL system for highly sensitive deal information.
 * 
 * @order 80 - Runs early to block unauthorized access
 * @throws SugarApiExceptionNotAuthorized For access violations
 */
$hook_array['after_retrieve'][] = array(
    80,
    'Validate deal access permissions',
    'custom/modules/Deals/logic_hooks/SecurityHook.php',
    'SecurityHook',
    'validateAccess'
);

/**
 * Dynamic Fields Calculation Hook
 * 
 * Calculates time-sensitive fields that change daily. This hook:
 * - Calculates days spent in current pipeline stage
 * - Determines if deal is at-risk based on stage duration
 * - Calculates days until expected close date
 * - Updates aging indicators for stalled deals
 * - Computes velocity metrics for the deal
 * 
 * These calculations help identify deals that need attention and
 * provide real-time visibility into deal progression.
 * 
 * @order 85 - Runs after security checks
 */
$hook_array['after_retrieve'][] = array(
    85,
    'Calculate days in current stage',
    'custom/modules/Deals/logic_hooks/CalculationHook.php',
    'CalculationHook',
    'calculateDaysInStage'
);

/**
 * Process Record Hooks
 * 
 * These hooks execute when deal records are processed for list views.
 * They add display-specific data and formatting without modifying the database.
 */
$hook_array['process_record'] = array();

/**
 * Pipeline Data Enhancement for List Views Hook
 * 
 * Enriches deal records with pipeline-specific data for list view display. This hook:
 * - Adds color coding based on deal status and risk level
 * - Formats currency values with proper symbols and separators
 * - Adds visual indicators for at-risk deals
 * - Includes pipeline stage icons or badges
 * - Calculates and adds progress indicators
 * - Adds hover tooltips with additional information
 * 
 * This enhancement improves list view usability by providing visual
 * cues and formatted data without requiring custom list view code.
 * 
 * @order 80 - Single process_record hook for efficiency
 */
$hook_array['process_record'][] = array(
    80,
    'Add pipeline data for list view',
    'custom/modules/Deals/logic_hooks/ProcessRecordHook.php',
    'ProcessRecordHook',
    'addPipelineData'
);

/**
 * After Delete Hooks
 * 
 * These hooks execute after a deal has been successfully deleted.
 * They handle post-deletion cleanup, notifications, and audit logging.
 */
$hook_array['after_delete'] = array();

/**
 * Post-deletion Cleanup and Notifications Hook
 * 
 * Handles tasks that must occur after successful deal deletion. This hook:
 * - Sends deletion confirmation notifications to stakeholders
 * - Updates pipeline metrics to reflect the deletion
 * - Cleans up any remaining orphaned records
 * - Updates forecasting and reporting data
 * - Creates final audit log entry with deletion details
 * - Triggers any compliance-required actions
 * 
 * Post-deletion handling ensures the system remains consistent
 * after deal removal and stakeholders are properly informed.
 * 
 * @order 90 - Single after_delete hook
 */
$hook_array['after_delete'][] = array(
    90,
    'Handle post-deletion tasks',
    'custom/modules/Deals/logic_hooks/PostDeleteHook.php',
    'PostDeleteHook',
    'handlePostDeletion'
);

/**
 * Relationship Hooks
 * 
 * These hooks manage the creation and deletion of relationships between
 * deals and other modules (contacts, accounts, checklists, etc.).
 */
$hook_array['before_relationship_add'] = array();
$hook_array['after_relationship_add'] = array();
$hook_array['before_relationship_delete'] = array();
$hook_array['after_relationship_delete'] = array();

/**
 * Checklist Relationship Validation Hook
 * 
 * Validates checklist relationships before they are created. This hook:
 * - Verifies user has permission to modify deal checklists
 * - Ensures checklist template/item exists and is active
 * - Prevents duplicate checklist assignments
 * - Validates checklist is appropriate for current stage
 * - Checks for conflicts with existing checklists
 * - Enforces business rules for checklist assignment
 * 
 * This validation ensures only valid and authorized checklist
 * relationships are created, maintaining data integrity.
 * 
 * @order 90 - High priority to prevent invalid relationships
 * @return boolean False to prevent relationship creation
 */
$hook_array['before_relationship_add'][] = array(
    90,
    'Validate checklist relationship before adding',
    'custom/modules/Deals/ChecklistLogicHook.php',
    'ChecklistLogicHook',
    'validateChecklistRelationship'
);

/**
 * Deal Metrics Update on Relationship Add Hook
 * 
 * Updates deal metrics when new relationships are created. This hook:
 * - Recalculates contact count and engagement metrics
 * - Updates account relationship strength indicators
 * - Refreshes checklist completion percentages
 * - Recalculates deal score based on new relationships
 * - Updates activity metrics and timelines
 * - Triggers notifications for significant relationships
 * 
 * Keeping metrics current ensures accurate reporting and helps
 * identify deals with strong stakeholder engagement.
 * 
 * @order 85 - Runs after relationship is established
 */
$hook_array['after_relationship_add'][] = array(
    85,
    'Update deal metrics after relationship add',
    'custom/modules/Deals/logic_hooks/RelationshipHook.php',
    'RelationshipHook',
    'updateMetricsOnAdd'
);

/**
 * Deal Metrics Update on Relationship Delete Hook
 * 
 * Updates deal metrics when relationships are removed. This hook:
 * - Decrements relationship counters appropriately
 * - Recalculates engagement and activity scores
 * - Updates checklist metrics if items were removed
 * - Adjusts deal scoring to reflect reduced relationships
 * - Checks for and alerts on critical relationship losses
 * - Maintains audit trail of relationship changes
 * 
 * Proper handling of relationship removal ensures metrics remain
 * accurate and can trigger alerts for concerning changes.
 * 
 * @order 85 - Runs after relationship is removed
 */
$hook_array['after_relationship_delete'][] = array(
    85,
    'Update deal metrics after relationship delete',
    'custom/modules/Deals/logic_hooks/RelationshipHook.php',
    'RelationshipHook',
    'updateMetricsOnDelete'
);